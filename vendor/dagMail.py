'''
dagMail v1
Created by Dhruv Govil
www.dgovil.com
##########
For UI, in maya Python command line, type
dagmail.ui();

From there you can set up all the necessary bits and it will self install the necessary scripts for you.

WARNING: READ THIS NEXT BIT!!!
Because this script requires your email password and because of the nature of any Maya script being user editable,
there is no possible way for me to keep your password safe from anyone who can access your computer.

I therefore recommend setting up a dummy gmail account for this and using a password you don't normally use.

Email me at dhruv@dgovil.com if you have any issues. I can't promise I can help, but I will try my best.
'''

import smtplib
import maya.cmds as cmds
import os
import cPickle
from time import time
from platform import node as dag_compName

class DAGmail(object):
    """Class to contain all email functionality"""
    @classmethod
    def showUI(cls):
        """A function to instantiate the options window"""
        win = cls()
        win.create()
        return win
    def __init__(self):
        """Initialize common data attributes"""
        self.window = 'dag_emailWindow'
        self.title = 'dagRenderMail'
        self.size= (195, 290);
        
        #Sets some defaults
        self.subject='Render Complete on '+str(dag_compName());
        self.login= 'sender@email.com'
        self.password='Password'
        self.to='destination@email.com'
        self.time='10'
        self.smtp='smtp.gmail.com:587'
        self.render = ''
        
        #Default message body
        self.body='Your render on '+str(dag_compName())+' is now complete.'  + "this message is automatically generated by dagMail. \n dagmail script by Dhruv Govil www.dgovil.com \n\n\n"
        
        
        #default name for settings file. Can be anything.    
        self.config='dagmail.settings'
        
        #Default MEL scripts. Don't change.
        self.preScr = 'python "import dagMail";python "dagMail.dagMail.preScript()"'
        self.postScr = 'python "import dagMail";python "dagMail.dagMail.postScript()"'
        
    def ui(self):
        """Draw the window for DAGmail. 
        WARNING: The password field is and cannot be obfuscated from anyone who has access to your computer.
        This is the nature of Maya scripts and I cannot do anything about it.
        I recommend using a dummy account if at all possible.
        """
        
        # delete the window if its handle exists
        if cmds.window(self.window, exists=True):
            cmds.deleteUI(self.window, window=True)
        
        #reads settings
        self.read()
        
        # initialize the window
        self.window = cmds.window(
            self.window,
            title=self.title,
            width=200,
            sizeable=False,
            mnb=False,
            mxb=False
        )
        self.mainCol = cmds.columnLayout( adjustableColumn=True )
        cmds.text( label='', align='center',height=5)
        cmds.text( label='email (From)', align='left' , width=150)
        self.userFld = cmds.textField(text=self.login)
        
        
        cmds.text( label='', align='center',height=10)
        cmds.text( label='Password', align='left' )
        self.pswdFld = cmds.textField(text=self.password)
        
        
        cmds.text( label='', align='center',height=10)
        cmds.text( label='email (To)', align='left' )
        self.toFld = cmds.textField(text=self.to)
        
        cmds.text( label='', align='center',height=10)
        cmds.text( label='RenderTime in Minutes', align='left' )
        self.timeFld = cmds.textField(text=self.time, )

        cmds.text( label='', align='center',height=10)
        cmds.text( label='Smtp Server:port', align='left' )
        self.smtpFld = cmds.textField(text=self.smtp, )


        cmds.text( label='', align='center',height=10)

        self.saveBtn = cmds.button( label='Save Settings',command=self.save)
        self.installBtn = cmds.button( label='Install Scripts',command=self.install)
        self.installBtn = cmds.button( label='Send Test Email',command=self.test)
        
        cmds.separator( height=40, style='doubleDash' )
        cmds.text( label='Script by Dhruv Govil', align='center' )
        cmds.text( label='www.dgovil.com', align='center',hyperlink=True )
        cmds.text( label='', align='center',height=10)
        cmds.showWindow( self.window )
        
    def preScript(self):
        '''Runs a couple scripts before rendering to prepare dump and find out how long render took'''
        
        self.startTime = time();
        
        cmds.scriptEditorInfo( historyFilename='renderHistory.txt', writeHistory=True )
        print 'Render Begin'
        self.dumpFile = cmds.scriptEditorInfo(query=True, historyFilename=True)
        
    def postScript(self):
        '''
        Runs the Post render scripts and cleans things up.
        Used to read the render log once the render is complete.
        '''
        self.endTime = time()
        #Turns off history for this render
        print 'Render Complete'
        cmds.scriptEditorInfo (writeHistory=False)
        
        
        
        self.totalTime = (self.endTime - self.startTime)/60
        
        #Reads the renderlog
        self.history = open(self.dumpFile,'r')
        while 1:
            line = self.history.readline()
            self.render += line
            
            if not line:
                self.render+= '\n\n'
                break
            pass
        
        self.history.close()
            
        #refreshes the settings
        self.read();
        
        #Compares the render time with the minimum set and decides whether to send the email.
        if self.totalTime >= float(self.time) :
            self.sendMail(message=(self.body+'Your render log is attached below \n\n'+self.render));
        
        #Cleans up after itself.
        self.render = ''
        os.remove(self.dumpFile);
        
    def sendMail(self,*args, **kwargs):
        '''Actual method for sending the final email.'''
        
        print 'attempting to send Mail'
        
        #define variables
        self.login= kwargs.setdefault('login',self.login)
        self.password = kwargs.setdefault('password', self.password)
        self.subject = kwargs.setdefault('subject', self.subject)
        self.to = kwargs.setdefault('to', self.to)
        self.smtp = kwargs.setdefault('smtp', self.smtp)
        self.body = kwargs.setdefault('message',self.body)
        
        #Defines message structure
        header = 'From: ' + self.login + '\n' + 'To:' + self.to + '\n' + 'Subject:'+ self.subject + '\n'
        message = header + self.body
     
     
        #Server neccesities
        server = smtplib.SMTP(self.smtp)
        server.starttls()
        server.login(self.login,self.password)
        problems = server.sendmail(self.login, self.to, message)
        server.quit()
        print 'email sent'
        return problems
        pass
    
    def install (self, *args):
        '''Installs the pre and post render scripts for the user'''
        
        #Gets existing Pre/Post render MEL if they exist
        self.preMel = str(cmds.getAttr('defaultRenderGlobals.preMel'))
        self.postMel = str(cmds.getAttr('defaultRenderGlobals.postMel'))
        
            
        #Sets the PreRender MEL and cleans up some Maya glitch
        if self.preScr[0:-2] not in self.preMel:
            self.preMel = (self.preScr + ';' + self.preMel)
            if self.preMel[-4:] in 'None':
                self.preMel=self.preMel[0:-4]
            cmds.setAttr('defaultRenderGlobals.preMel',self.preMel,type='string')
            
            
        #Sets the PostRender MEL and cleans up some Maya glitch
        if self.postScr[0:-2] not in self.postMel:
            self.postMel = (self.postScr + ';' + self.postMel)
            if self.postMel[-4:] in 'None':
                self.postMel =self.postMel[0:-4]
            cmds.setAttr('defaultRenderGlobals.postMel',self.postMel,type='string')
        
        print 'Scripts succesfully installed'
         
    def save(self, *args):
        '''saves user config file'''
        if os.path.exists(self.config) is True:
            os.remove(self.config);
        
            
        self.login = (cmds.textField(self.userFld,q=True,text=True))
        self.password = (cmds.textField(self.pswdFld,q=True,text=True))
        self.to = (cmds.textField(self.toFld,q=True,text=True))
        self.time = (cmds.textField(self.timeFld,q=True,text=True))
        self.smtp = (cmds.textField(self.smtpFld,q=True,text=True))
        
        #encodes the password. This is only to stop prying eyes. It is not actual security.
        self.password = self.password.encode('base64')
        
        self.dagConfig = {'login':self.login,'password':self.password, 'to':self.to,'time':self.time, 'smtp':self.smtp}
        
        #dumps the data into the settings file.
        self.output = open(self.config, 'wb');
        cPickle.dump(self.dagConfig, self.output)
        self.output.close()
        print 'Settings for dagMail saved at ' + os.path.realpath(self.config)
        
        self.read()
    
    def read(self, *args):
        '''reads the user config file'''
        
        #Checks if settings file exists and reads settings if they do.
        if os.path.exists(self.config) is False:
            pass
        else:
            self.input=open(self.config, 'rb')
            self.dagConfig = cPickle.load(self.input)
            self.input.close()
                
            self.login =  self.dagConfig['login']
            self.password = self.dagConfig['password'].decode('base64')
            self.to = self.dagConfig['to']
            self.time = self.dagConfig['time']
            self.smtp = self.dagConfig['smtp']
     
    def test(self, *args):
        '''sends test email'''
        self.save()
        self.sendMail(subject='Test Message from dagMail',message='This is a test message')

global dagMail
dagMail=DAGmail()   
#dagMail.ui()
